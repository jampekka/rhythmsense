{
  "version": 3,
  "sources": ["../logging.coffee", "../analyze.coffee"],
  "sourcesContent": ["(function() {\n  var get_logger, get_worker;\n\n  get_logger = async function(session_id) {\n    var dir, file, worker;\n    if (session_id == null) {\n      session_id = session_id = new Date().toISOString();\n    }\n    dir = \"rhythmsense_log\";\n    file = session_id + \".jsons\";\n    worker = get_worker();\n    worker.postMessage({dir, file});\n    await new Promise(function(accept) {\n      return worker.addEventListener(\"message\", accept, {\n        once: true\n      });\n    });\n    return function(data) {\n      return worker.postMessage(data);\n    };\n  };\n\n  get_worker = function() {\n    //code = __WORKER_HACK__.toString().replace /^function .+\\{?|\\}$/g, ''\n    //console.log __WORKER_HACK__.toString()\n    //workerBlob = new Blob code, type: 'text/javascript'\n    //workerUrl = URL.createObjectURL workerBlob\n    return new Worker('dist/log_worker.js');\n  };\n\n  module.exports = {get_logger};\n\n}).call(this);\n", "(function() {\n  // TODO: Refactor the code into proper modules\n  var list_logs, logging, read_logs;\n\n  logging = require('./logging.coffee');\n\n  read_logs = async function*() {\n    var data, file, fs_root, handle, i, len, line, log_dir, name, ref, results, rows, x;\n    fs_root = (await navigator.storage.getDirectory());\n    log_dir = (await fs_root.getDirectoryHandle(\"rhythmsense_log\"));\n    ref = log_dir.entries();\n    results = [];\n    for await (x of ref) {\n      [name, handle] = x;\n      file = (await handle.getFile());\n      // TODO: Could be a lot faster\n      data = ((await file.text())).split('\\n');\n      rows = [];\n      for (i = 0, len = data.length; i < len; i++) {\n        line = data[i];\n        if (!line) {\n          continue;\n        }\n        rows.push(JSON.parse(line));\n      }\n      results.push((yield [name, rows]));\n    }\n    return results;\n  };\n\n  list_logs = async function() {\n    var log, name, ref, results, x;\n    ref = read_logs();\n    results = [];\n    for await (x of ref) {\n      [name, log] = x;\n      console.log(name);\n      results.push(console.log(log));\n    }\n    return results;\n  };\n\n  list_logs();\n\n}).call(this);\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA,OAAC,WAAW;AACV,YAAI,YAAY;AAEhB,qBAAa,eAAe,YAAY;AACtC,cAAI,KAAK,MAAM;AACf,cAAI,cAAc,MAAM;AACtB,yBAAa,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,UACnD;AACA,gBAAM;AACN,iBAAO,aAAa;AACpB,mBAAS,WAAW;AACpB,iBAAO,YAAY,EAAC,KAAK,KAAI,CAAC;AAC9B,gBAAM,IAAI,QAAQ,SAAS,QAAQ;AACjC,mBAAO,OAAO,iBAAiB,WAAW,QAAQ;AAAA,cAChD,MAAM;AAAA,YACR,CAAC;AAAA,UACH,CAAC;AACD,iBAAO,SAAS,MAAM;AACpB,mBAAO,OAAO,YAAY,IAAI;AAAA,UAChC;AAAA,QACF;AAEA,qBAAa,WAAW;AAKtB,iBAAO,IAAI,OAAO,oBAAoB;AAAA,QACxC;AAEA,eAAO,UAAU,EAAC,WAAU;AAAA,MAE9B,GAAG,KAAK,OAAI;AAAA;AAAA;;;AChCZ;AAAA;AAAA,OAAC,WAAW;AAEV,YAAI,WAAW,SAAS;AAExB,kBAAU;AAEV,oBAAY,mBAAkB;AAC5B,cAAI,MAAM,MAAM,SAAS,QAAQ,GAAG,KAAK,MAAM,SAAS,MAAM,KAAK,SAAS,MAAM;AAClF,oBAAW,MAAM,UAAU,QAAQ,aAAa;AAChD,oBAAW,MAAM,QAAQ,mBAAmB,iBAAiB;AAC7D,gBAAM,QAAQ,QAAQ;AACtB,oBAAU,CAAC;AACX,qBAAW,KAAK,KAAK;AACnB,aAAC,MAAM,MAAM,IAAI;AACjB,mBAAQ,MAAM,OAAO,QAAQ;AAE7B,oBAAS,MAAM,KAAK,KAAK,GAAI,MAAM,IAAI;AACvC,mBAAO,CAAC;AACR,iBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,qBAAO,KAAK,CAAC;AACb,kBAAI,CAAC,MAAM;AACT;AAAA,cACF;AACA,mBAAK,KAAK,KAAK,MAAM,IAAI,CAAC;AAAA,YAC5B;AACA,oBAAQ,KAAM,MAAM,CAAC,MAAM,IAAI,CAAE;AAAA,UACnC;AACA,iBAAO;AAAA,QACT;AAEA,oBAAY,iBAAiB;AAC3B,cAAI,KAAK,MAAM,KAAK,SAAS;AAC7B,gBAAM,UAAU;AAChB,oBAAU,CAAC;AACX,qBAAW,KAAK,KAAK;AACnB,aAAC,MAAM,GAAG,IAAI;AACd,oBAAQ,IAAI,IAAI;AAChB,oBAAQ,KAAK,QAAQ,IAAI,GAAG,CAAC;AAAA,UAC/B;AACA,iBAAO;AAAA,QACT;AAEA,kBAAU;AAAA,MAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;",
  "names": []
}
